include: "conf.sk"
import os

# TODO save also vst    
rule plots:
    input: counts=COUNTS, metadata="samples_data"
    output: "dds.Rdata", "fpkm.tsv.gz", "tmm.tsv.gz", "vsd.tsv.gz"
    params: tool=BIN_DIR+"/deseq2_qc", design=DESIGN, prefix=SPECIES, minc=MINC, minsamples=MINSAMPLES, gene_len=GENE_LEN, cores=CORES
    shell:
        """
            {params.tool} {input.counts} {input.metadata} {params.design} {params.prefix} {params.minc} {params.minsamples} {params.gene_len} {output} {params.cores}
        """

rule de:
    input: "dds.Rdata"
    output: tsv="{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv", volcano="{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.pdf"
    params: threads=CORES, alpha="{alpha}", factor="{what}", nom="{nom}", den="{den}", lfc=LFC
    script: SRC_DIR+"/deseq2_diff.R"

## TODO correct with limma/voom removing batch effects

## rule that removes H_ / M_ and filters only one kind of genes from metric.tsv.gz files
rule species_specific_matrices:
    input: "{metric}.tsv.gz"
    output: "{metric}_noSpecie.tsv.gz"
    params: specie=SPECIES
    shell:
        """
            zcat {input} | head -n 1 > {output}.tmp || echo 'plh'
            zcat {input} | sed 1d | sed 's/^{params.specie}_//1' >> {output}.tmp
            gzip -c {output}.tmp > {output}
            rm {output}.tmp
        """


## TODO vst PC

## TODO PC plots


# 1 TODO change to getopt and remove H_ via shell before
rule cris:
    input: expr="fpkm.tsv.gz"#, cris=CRIS
    params: prefix="all",debug=DEBUG
    output: "all_prediction_result.xls"
    script: SRC_DIR+"/cris_classify.R"

rule cris_v2:
    input: expr="{metric}_noSpecie.tsv.gz"
    params: prefix="cris_{metric}"
    output: "cris_{metric}_prediction_result.xls"
    script: SRC_DIR+"/cris_classify_V2.R"

rule wipe_up_after_cris:
    input: "cris_{metric}_prediction_result.xls"
    output: tsv="cris_{metric}_prediction_result.tsv", png="cris_{metric}_prediction_result.png"
    shell:
        """
            mv {input} {output.tsv}
            mv cris_{wildcards.metric}_heatmp.png {output.png}
            rm cris_{wildcards.metric}_sample_info.txt cris_{wildcards.metric}_sorted.dataset.gct cris_{wildcards.metric}_predicted*sorted.cls cris_{wildcards.metric}_*png  cris_{wildcards.metric}_features.xls
        """

rule cris_classes:
    input: tsv="cris_{metric}_prediction_result.tsv"
    output: tsv="cris_{metric}_{thr}_classes.tsv"
    run: 
        import pandas as pd
        import numpy as np
        d = pd.read_table(input.tsv, sep="\t", header=None, names=["sample","GSM","cris","fdr"])
        thr = float(wildcards.thr)
        d = d[d['fdr'] < thr]
        dp = pd.pivot_table(d, values='cris', index=['genealogy'], aggfunc=np.unique)
        dp.loc[[type(x) is not str for x in dp['cris'].values],'cris'] = "NS"
        res = pd.DataFrame(dp)
        res.to_csv(output.tsv, sep="\t")

#FDR_THR = 0.2 # cris paper uses this, we mark NC as not classified samples and NS as samples that change across samplings (are they XA/XB?)
rule cris_microarray:
    input: CRIS_UARRAY
    output: "cris_uarray_{thr}.tsv"
    run: 
        import pandas as pd
        import numpy as np
        d = pd.read_table(input[0], sep="\t", header=None, names=["sample","GSM","cris","fdr"])
        thr = float(wildcards.thr)
        d = d[d['fdr'] < thr]
        spl = [x.split('-')  for x in d['sample'].values]
        d['genealogy'] = [x[0] + "LMX0" + x[1] for x in spl]
        dp = pd.pivot_table(d, values='cris', index=['genealogy'], aggfunc=np.unique)
        dp.loc[[type(x) is not str for x in dp['cris'].values],'cris'] = "NS"
        res = pd.DataFrame(dp)
        res.to_csv(output[0], sep="\t")

## 2 TODO compare CRIS with uarray ones
# per nuovi cris tenere solo basali non filtrati attualmente e sottoporli allo stesso trattamento

### regola per calcolo score
def definput(wildcards):
    if (wildcards.expr == "fpkm"):
        return {'expr': 'fpkm.tsv.gz'}
    else:
        return {'expr': 'tmm.tsv.gz'}

rule score:
    input: unpack(definput), genes=MARKER
    params: tool=BIN_DIR+"/lymphoma_score"
    output: "{expr}_lymphoma_scores.tsv.gz"
    shell:
        """
            {params.tool} -e {input.expr} -g {input.genes} -o {output}
        """


# GO
rule go_input:
    input: "{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv"
    output: "{what}_cutoff{alpha}-{nom}.vs.{den}.goinsplit.tsv"
    params: lfc=LFC, thr=PVAL, specie=SPECIES
    shell:
        """
            sed 1d {input} | bawk '$7 < {params.thr} && $3 > {params.lfc} {{print "up",$1}} $7 < 0.05 && $3 < -{params.lfc} {{print "down",$1}}' | perl -pane 's/\\t{params.specie}_(.+)/\\t$1/g' > {output}
        """

rule go_universe:
    input: "{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv"
    output: "{what}_cutoff{alpha}-{nom}.vs.{den}.gouniverse.tsv"
    params: specie=SPECIES
    shell:
        """
            sed 1d {input} | cut -f 1 | perl -pane 's/^{params.specie}_(.+)/$1/g' > {output}
        """

rule go:
    input: classes="{what}_cutoff{alpha}-{nom}.vs.{den}.goinsplit.tsv", universe="{what}_cutoff{alpha}-{nom}.vs.{den}.gouniverse.tsv"
    output: "go_{what}_cutoff{alpha}-{nom}.vs.{den}.tsv.gz"
    params: ids="symbol", onto=['BP','MF','CC'], debug="yes"
    script: SRC_DIR+"/go.R"


#### Dot plots and selection of genes annoted TODO Generalize
rule sign:
    input: outliers="chemio_cutoff0.05-resp.vs.nonresp.deseq2.tsv", nooutliers="with_cook/chemio_cutoff0.05-resp.vs.nonresp.deseq2.tsv"
    output: "chemio_de_005.tsv"
    shell:
        """
            bawk '$7<0.05' {input.outliers} | translate -a -v -e "outliers"  <(bawk '$7<0.05 {{print $1,"nooutliers"}}' {input.nooutliers}) 1 | cut -f 1,2,3,4,7,8  | sed s'/H_//1'  | sed 1d > {output}
        """

rule select_annote:
    input: "chemio_de_005.tsv" 
    output: "chemio_de_005_genedesc.tsv"
    params: tool=BIN_DIR+"/add_description"
    shell:
        """
            {params.tool} -i {input} -o {output} -t GENENAME -f SYMBOL -n 1
        """

def defwhat(wildcards):
    if (wildcards.what == "de"):
        return {'wanted': 'chemio_de_005_genedesc.tsv'}
    else:
        return {'wanted': DATA+'/'+wildcards.what}

rule striplots_chemio:
    input: unpack(defwhat), dds="dds.Rdata"
    output: directory("{what}_plots")
    params: tool=BIN_DIR+"/striplots", TODO="irinotecan"
    shell:
        """
            mkdir -p {output}
            {params.tool} {input.wanted} {input.dds} {output} {params.TODO}
        """

### GSEA
rule gsea_input:
    input: "{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv"
    output: "{what}_cutoff{alpha}-{nom}.vs.{den}.gseain.tsv"
    params: lfc=LFC, thr=PVAL, specie=SPECIES, name=NAME
    shell:
        """
            echo -e "geneid\\tname\\tsort" > {output}
            sed 1d {input} | bawk '{{print $1,"{params.name}",$3}}' | perl -pane 's/{params.specie}_(.+)/$1/g' >> {output}
        """

rule gsea:
    input: tsv="{what}_cutoff0.05-{nom}.vs.{den}.gseain.tsv", pathways=GSEA_PATHWAYS
    output: outdir=directory("{what}_gsea_{nom}vs{den}"), outtable="{what}_{nom}.vs.{den}.significant_NES_gsea", outtableall="{what}_{nom}.vs.{den}.all_NES_gsea"
    params: save="gsea_{what}_{nom}.vs.{den}.Rdata", cores=CORES, debug="no"
    script: GSEA



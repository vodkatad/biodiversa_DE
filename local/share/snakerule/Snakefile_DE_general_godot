include: "conf.sk"
import os

rule filter_expr:
    input: counts=COUNTS, metadata="samples_data"
    output: "counts.tsv.gz"
    shell:
        """
            zcat {input.counts} | transpose | tee >(bawk 'NR==1{{print}}' > {output}.tmp) | filter_1col 1 <(sed 1d {input.metadata} | cut -f 1) > {output}.tmp2
            cat {output}.tmp {output}.tmp2 | transpose | gzip > {output}
            rm {output}.tmp*
        """

def input_plots(wildcards):
    if FILTERSAMPLES == "yes":
        return { 'counts': "counts.tsv.gz" }
    elif FILTERSAMPLES == "no":
        return { 'counts': COUNTS }
    else:
        print("Please define FILTERSAMPLES in conf.sk! yes or no?")


rule plots:
    input: unpack(input_plots), metadata="samples_data"
    output: "dds.Rdata", "fpkm.tsv.gz"
    params: tool=BIN_DIR+"/deseq2_qc", design=DESIGN, prefix=SPECIES, minc=MINC, minsamples=MINSAMPLES, gene_len=GENE_LEN, cores=CORES
    shell:
        """
            {params.tool} {input.counts} {input.metadata} {params.design} {params.prefix} {params.minc} {params.minsamples} {params.gene_len} {output} {params.cores}
        """
    
rule de:
    input: "dds.Rdata"
    output: tsv="{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv", volcano="{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.pdf"
    params: threads=CORES, alpha="{alpha}", factor="{what}", nom="{nom}", den="{den}", lfc=LFC
    script: SRC_DIR+"/deseq2_diff.R"


# todo limma de and comparison of limma-deseq results


# GO
rule go_input:
    input: "{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv"
    output: "{what}_cutoff{alpha}-{nom}.vs.{den}.goinsplit.tsv"
    params: lfc=LFC, thr=PVAL, specie=SPECIES
    shell:
        """
            sed 1d {input} | bawk '$7 < {params.thr} && $3 > {params.lfc} {{print "up",$1}} $7 < 0.05 && $3 < -{params.lfc} {{print "down",$1}}' | perl -pane 's/\\t{params.specie}_(.+)/\\t$1/g' > {output}
        """

rule go_universe:
    input: "{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv"
    output: "{what}_cutoff{alpha}-{nom}.vs.{den}.gouniverse.tsv"
    params: specie=SPECIES
    shell:
        """
            sed 1d {input} | cut -f 1 | perl -pane 's/^{params.specie}_(.+)/$1/g' > {output}
        """

rule go:
    input: classes="{what}_cutoff{alpha}-{nom}.vs.{den}.goinsplit.tsv", universe="{what}_cutoff{alpha}-{nom}.vs.{den}.gouniverse.tsv"
    output: "go_{what}_cutoff{alpha}-{nom}.vs.{den}.tsv.gz"
    params: ids="symbol", onto=['BP','MF','CC'], debug="yes"
    script: SRC_DIR+"/go.R"


#### Dot plots and selection of genes annoted TODO Generalize
rule sign:
    input: outliers="chemio_cutoff0.05-resp.vs.nonresp.deseq2.tsv", nooutliers="with_cook/chemio_cutoff0.05-resp.vs.nonresp.deseq2.tsv"
    output: "chemio_de_005.tsv"
    shell:
        """
            bawk '$7<0.05' {input.outliers} | translate -a -v -e "outliers"  <(bawk '$7<0.05 {{print $1,"nooutliers"}}' {input.nooutliers}) 1 | cut -f 1,2,3,4,7,8  | sed s'/H_//1'  | sed 1d > {output}
        """

rule select_annote:
    input: "chemio_de_005.tsv" 
    output: "chemio_de_005_genedesc.tsv"
    params: tool=BIN_DIR+"/add_description"
    shell:
        """
            {params.tool} -i {input} -o {output} -t GENENAME -f SYMBOL -n 1
        """

def defwhat(wildcards):
    if (wildcards.what == "de"):
        return {'wanted': 'chemio_de_005_genedesc.tsv'}
    else:
        return {'wanted': DATA+'/'+wildcards.what}

rule striplots_chemio:
    input: unpack(defwhat), dds="chemio_high.Rdata"
    output: directory("{what}_plots")
    params: tool=BIN_DIR+"/striplots"
    shell:
        """
            mkdir -p {output}
            {params.tool} {input.wanted} {input.dds} {output} 
        """

### GSEA
rule gsea_input:
    input: "{what}_cutoff{alpha}-{nom}.vs.{den}.deseq2.tsv"
    output: "{what}_cutoff{alpha}-{nom}.vs.{den}.gseain.tsv"
    params: lfc=LFC, thr=PVAL, specie=SPECIES, name=NAME
    shell:
        """
            echo -e "geneid\\tname\\tsort" > {output}
            sed 1d {input} | bawk '{{print $1,"{params.name}",$3}}' | perl -pane 's/{params.specie}_(.+)/$1/g' >> {output}
        """

rule gsea:
    input: tsv="{what}_cutoff0.05-{nom}.vs.{den}.gseain.tsv", pathways=GSEA_PATHWAYS
    output: outdir=directory("{what}_gsea_{nom}vs{den}"), outtable="{what}_{nom}.vs.{den}.significant_NES_gsea", outtableall="{what}_{nom}.vs.{den}.all_NES_gsea"
    params: save="gsea_{what}_{nom}.vs.{den}.Rdata", cores=CORES, debug="no"
    script: GSEA



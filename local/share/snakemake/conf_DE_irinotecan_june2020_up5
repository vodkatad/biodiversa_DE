import os
def find_prj_root(path=os.getcwd()):
	if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
		return path
	else:
		if path:
			return find_prj_root(os.path.dirname(path))
		else:
			raise Exception("Can not find the PRJ_ROOT directory")


PRJ_ROOT=find_prj_root()
                                                    
NAME="Biodiversa_up5_irino_june2020"
DATA=PRJ_ROOT+"/local/share/data/"+NAME
BIN_DIR=PRJ_ROOT+"/local/bin"
SRC_DIR=PRJ_ROOT+"/local/src"

BIT_DIR='/mnt/trcanmed/snaketree/prj/RNASeq_biod_metadata/dataset/july2020/'

COUNTS=BIT_DIR+"/merged_hs_mm.tsv.gz"
GENE_LEN=BIT_DIR+"/gene_len"
###
DESIGN="~batch+irinotecan"
SPECIES="H" # if all do not filter, otherwise keep all genes that starts with 'SPECIES_'
MINC=5
MINSAMPLES=2

FILTERSAMPLES="no" #  if yes keeps only samples in samples_data

#> library(fgsea)
#Loading required package: Rcpp
#> p1 <- gmtPathways("c5.bp.v7.0.symbols.gmt")
#> pathways <- list(p1)
#> save(pathways, file="bp_hs_symbol.RData")
GSEA_PATHWAYS=PRJ_ROOT+"/local/share/data/gsea/Hallmark_curated_hs_symbol.RData"
GSEA_PATHWAYS_NOTHALL=PRJ_ROOT+"/local/share/data/gsea/Not_hallmark_hs_entrez.RData"

GSEA=PRJ_ROOT+"/local/src/gsea.R"
#GSEA_INPUT=PRJ_ROOT+"/local/src/gsea_input_from_cr.R"
#GSEA_XLS=PRJ_ROOT+"/local/src/gsea_genes_signature.R"


# for biodiversa change - in . in metadata
rule wanted:
	output: "wanted"
	shell:
		"""
		 echo -e "LMX_BASALE" > {output}
		"""

rule irino:
	input: irino="/mnt/trcanmed/snaketree/prj/pdxopedia/local/share/data/treats/may2020/irinotecan_w3.txt"
	output: meta="irino", plot="chemio_median.png"
	params: tool=BIN_DIR+"/quartiles_vols"
	log: "chemio_median.log"
	shell:
		"""
            {params.tool} {input} {output.meta} {output.plot} &> {log}
        """


rule samples_data:
    input: meta=BIT_DIR+"/selected_metadata", irino="irino", wanted="wanted"
    output: "samples_data"
    log: "samples_data.log"
    shell:
        """
			echo -e "id\\tsample\\tirinotecan\\tbatch" > {output}
			cat {input.meta} | perl -pane 's/(CRC[\d\w]+)-(\d)/$1.$2/'  \
			| cut -f 1,2,3 | tr "." "\\t" | filter_1col 3 {input.wanted}  | tr "_" "\\t" \
			| bawk '{{print $1, substr($1,0,7), $2}}' | translate -v -e NA -a <(sed 1d {input.irino} | cut -f1,3) 2 | tee {log} |  bawk '$3!="NA"' >> {output}
        """

LFC=0.5849625 # 1.5 FC
CORES=6
PVAL=0.05

DEBUG="yes"

rule this_sign:
    input: outliers="chemio_cutoff0.05-resp.vs.nonresp.deseq2.tsv", nooutliers="with_cook/chemio_cutoff0.05-resp.vs.nonresp.deseq2.tsv"
    output: "chemio_de_005.tsv"
    shell:
        """
            bawk '$7<0.05' {input.outliers} | translate -a -v -e "outliers"  <(bawk '$7<0.05 {{print $1,"nooutliers"}}' {input.nooutliers}) 1 | cut -f 1,2,3,4,7,8  | sed s'/H_//1'  | sed 1d > {output}
        """

rule this_select_annote:
    input: "chemio_de_005.tsv" 
    output: "chemio_de_005_genedesc.tsv"
    params: tool=BIN_DIR+"/add_description"
    shell:
        """
            {params.tool} -i {input} -o {output} -t GENENAME -f SYMBOL -n 1
        """

def defwhat(wildcards):
    if (wildcards.what == "de"):
        return {'wanted': 'chemio_de_005_genedesc.tsv'}
    else:
        return {'wanted': DATA+'/'+wildcards.what}

# specific cook/nocook rules
# rule striplots_chemio:
#     input: unpack(defwhat), dds="dds.Rdata"
#     output: directory("{what}_plots")
#     params: tool=BIN_DIR+"/striplots", todo="irinotecan"
#     shell:
#         """
#             mkdir -p {output}
#             {params.tool} {input.wanted} {input.dds} {output} {params.todo}
#         """
